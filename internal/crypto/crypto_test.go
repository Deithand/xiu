package crypto

import "testing"

func TestDeriveShared(t *testing.T) {
	privA := []byte{
		1, 2, 3, 4, 5, 6, 7, 8,
		9, 10, 11, 12, 13, 14, 15, 16,
		17, 18, 19, 20, 21, 22, 23, 24,
		25, 26, 27, 28, 29, 30, 31, 32,
	}
	privB := []byte{
		32, 31, 30, 29, 28, 27, 26, 25,
		24, 23, 22, 21, 20, 19, 18, 17,
		16, 15, 14, 13, 12, 11, 10, 9,
		8, 7, 6, 5, 4, 3, 2, 1,
	}
	pubA := []byte{
		0x07, 0xa3, 0x7c, 0xbc, 0x14, 0x20, 0x93, 0xc8,
		0xb7, 0x55, 0xdc, 0x1b, 0x10, 0xe8, 0x6c, 0xb4,
		0x26, 0x37, 0x4a, 0xd1, 0x6a, 0xa8, 0x53, 0xed,
		0x0b, 0xdf, 0xc0, 0xb2, 0xb8, 0x6d, 0x1c, 0x7c,
	}
	pubB := []byte{
		0x0d, 0x79, 0x96, 0x00, 0xf6, 0xff, 0xae, 0xe2,
		0xe1, 0x21, 0xe6, 0xb8, 0xf7, 0xa0, 0x5d, 0xc6,
		0x68, 0x74, 0xb5, 0x1d, 0xb3, 0x10, 0x2d, 0x0d,
		0x71, 0xf7, 0x99, 0xa0, 0x9c, 0xb4, 0xc4, 0x61,
	}
	psk := []byte("psk")
	expected := []byte{
		0xca, 0x62, 0x20, 0x6b, 0x17, 0xef, 0x55, 0x4d,
		0xac, 0xe9, 0x9e, 0x12, 0xeb, 0x7a, 0x7f, 0xe2,
		0xed, 0xab, 0xb8, 0x15, 0xe4, 0x56, 0xf0, 0xee,
		0x32, 0x82, 0xf6, 0x0e, 0x74, 0x2e, 0xf2, 0x8f,
	}
	key, err := DeriveShared(privA, pubB, psk)
	if err != nil {
		t.Fatalf("derive: %v", err)
	}
	for i := range expected {
		if key[i] != expected[i] {
			t.Fatalf("unexpected key: %x != %x", key, expected)
		}
	}
	key2, err := DeriveShared(privB, pubA, psk)
	if err != nil {
		t.Fatalf("derive: %v", err)
	}
	for i := range expected {
		if key2[i] != expected[i] {
			t.Fatalf("key mismatch B: %x != %x", key2, expected)
		}
	}
}
